# Set the directory we want to store zinit and plugins in
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Pywal
(cat ~/.cache/wal/sequences &)

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
    mkdir -p "$(dirname $ZINIT_HOME)"
    git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

eval "$(dircolors -b)"

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Plugins
zinit light Aloxaf/fzf-tab
zinit light joshskidmore/zsh-fzf-history-search
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-syntax-highlighting

autoload -Uz compinit
compinit -d "${XDG_CACHE_HOME:-$HOME/.cache}/zcompdump"

zstyle ':completion:*' completer _complete _ignored _approximate
zstyle ':fzf-tab:*' fzf-preview ''
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no

zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'exa $realpath'

# History
HISTSIZE=10000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

bindkey -v

bindkey '^f' autosuggest-accept
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

###############
### Aliases ###
###############
# General
cd() { z "$@"; }
nf() { nerdfetch "$@"; }
pf() { pfetch "$@"; }
ff() { fastfetch "$@"; }
ls() { exa -lah "$@"; }
v() { nvim "$@"; }
y() { yazi "$@"; }
vif() { nvim $(fzf) "$@"; }
gg() { lazygit "$@"; }
tree() { tre -e automatic "$@"; }
cz() { chezmoi "$@"; }

# git
gs() { git status "$@"; }
ga() { git add "$@"; }
gaa() { git add .; }
gc() { git commit "$@"; }
gcm() { git commit -m "$@"; }
gp() { git push "$@"; }
gpl() { git pull "$@"; }
gi() { git init "$@"; }
gcl() { git clone "$@"; }

# branching
gb() { git branch "$@"; }
gba() { git branch -a "$@"; }
gco() { git checkout "$@"; }
gcb() { git checkout -b "$@"; }
gsw() { git switch "$@"; }
gswc() { git switch -c "$@"; }

# logs and diffs
gl() { git log --oneline --graph --decorate "$@"; }
gd() { git diff "$@"; }
gds() { git diff --staged "$@"; }

######################
### Pre-Shell Init ###
######################

# Starship prompt
eval "$(starship init zsh)"

# fzf integration
eval "$(fzf --zsh)"

# Zoxide
eval "$(zoxide init zsh)"
